@using System;
@using Sandbox;
@using Sandbox.UI;

@inherits Panel
@attribute [StyleSheet]

@namespace Perfmon

@if (draw)
{
  <root class="perfmon">
    <div class="fps @FPSStatus">
      <p>@fps fps / @ms ms</p>
    </div>
    @if (ping != -1)
    {
      <div class="ping @PingStatus">
        <p>@ping ms</p>
      </div>
    }
  </root>
}

@code
{
  public readonly IClient? client;
  public bool draw = true;

  private string FPSStatus
  {
    get
    {
      if (fps >= 60) return "green";
      if (fps >= 30) return "orange";
      else return "red";
    }
  }
  private string PingStatus
  {
    get
    {
      if (ping <= 50) return "green";
      if (ping <= 300) return "orange";
      else return "red";
    }
  }

  public float fps { get; private set; }
  public float ms { get; private set; }
  float ping { get { if (client == null) return -1f; return client.Ping; } }

  public float updateRate = 1f;
  private float deltaBetweenUpdates;
  private int framesBetweenUpdates;

  public Perfmon(bool draw = true, IClient client = null, float updateRate = 1f)
  {
    this.draw = draw;
    this.client = client;
    this.updateRate = updateRate;
    // RenderedManually = true; // Only for RootPanel
    // Scale = 1; // Only for RootPanel
  }

  [Sandbox.GameEvent.Client.FrameAttribute]
  void NewFrame()
  {
    deltaBetweenUpdates += Time.Delta;
    framesBetweenUpdates++;

    if (deltaBetweenUpdates > 1 / updateRate)
    {
      //Log.Info("Updating FPS meter");

      // Update FPS meter
      fps = (float)Math.Round(framesBetweenUpdates / deltaBetweenUpdates, 2, MidpointRounding.AwayFromZero);
      ms = (float)Math.Round(deltaBetweenUpdates / framesBetweenUpdates * 1000f, 2, MidpointRounding.AwayFromZero);

      // Reset counters
      deltaBetweenUpdates = 0;
      framesBetweenUpdates = 0;

      // Invalidate Panel
      StateHasChanged();
    }
  }
}